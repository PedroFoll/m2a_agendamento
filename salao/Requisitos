# Desafio Pr√°tico: Sistema de Agendamento para Sal√£o de Beleza

## 1. Contexto do Problema e Requisitos T√©cnicos
Sua tarefa √© desenvolver uma aplica√ß√£o web para um sal√£o de beleza 
que ajude a organizar e gerenciar seus agendamentos de forma eficiente.
Para este desafio, √© **obrigat√≥rio** o uso das seguintes tecnologias:
* **Python**
* **Django**
* **Ambiente virtual (`venv`)** para isolar as depend√™ncias do projeto.

## 2. Requisitos de Neg√≥cio
### **2.1. Cadastro de Clientes, Servi√ßos e Equipe**
O sal√£o precisa de um lugar para registrar todos os seus clientes, os servi√ßos que oferece (como "Corte de Cabelo" ou "Manicure") 
e os profissionais que comp√µem a equipe.
O sistema deve permitir que essas informa√ß√µes sejam cadastradas e consultadas facilmente.

#2.1.1 - Eu como recepcionista, quero cadastrar :
#clientes - nome, telefone, email, data de nascimento
#servi√ßos - nome, descri√ß√£o, pre√ßo
#profissionais - nome, telefone, email, data de contrata√ß√£o

#2.1.2 - Eu como recepcionista, quero consultar:
#clientes - nome, telefone, email
#servi√ßos - nome, descri√ß√£o, pre√ßo
#profissionais - nome, telefone, email

#2.1.3 - Eu como recepcionista, quero que o sistema informe na consulta dos clientes:
#1- A quantidade total de clientes cadastrados no sistema.
#2- Nome, telefone, data de nascimento e email de cada cliente.

### **2.2. Gest√£o de Agendamentos**
O sistema deve permitir que a recepcionista agende servi√ßos para os clientes com um profissional espec√≠fico, 
em uma data e hor√°rio definidos. A ferramenta precisa ser capaz de registrar o **status** de cada agendamento 
(por exemplo, "Agendado", "Conclu√≠do" ou "Cancelado").

#2.2.1 - Eu como reepcionista, quero poder agendar:
#1- Um servi√ßo para um cliente, com um profissional e um servi√ßo, em uma data e hor√°rio espec√≠ficos.
#1.1- Preciso do nome do cliente, nome do profissionla, o servi√ßo que ser√° realizado, a data e o hor√°rio do agendamento.
#2- O status do agendamento (Agendado, Conclu√≠do, Cancelado)


### **2.3. Acompanhamento de Servi√ßos**
O dono do sal√£o precisa de um relat√≥rio que mostre o total de servi√ßos **conclu√≠dos** em um per√≠odo de tempo. 
Isso ajudar√° a medir o desempenho e a produtividade da equipe.

#2.3.1 - Eu como dono do sal√£o, quero um relat√≥rio que mostre:
#1- O total de servi√ßos conclu√≠dos em um per√≠odo de tempo (data inicial e data final).
#1.1- Preciso da data inicial e data final para gerar o relat√≥rio.
#1.2- O relat√≥rio deve mostrar o total de servi√ßos conclu√≠dos nesse per√≠odo.
#1.3- A pesquisa do relat√≥rio deve considerar apenas os agendamentos com status enviado na pesquisa.


### **2.4. Aten√ß√£o √† Performance**
A aplica√ß√£o precisa ser r√°pida para que a equipe possa trabalhar sem lentid√£o. 
Ao desenvolver o relat√≥rio de acompanhamento, pense em como a sua solu√ß√£o se comportaria caso o sal√£o tivesse milhares de agendamentos.
A performance da sua solu√ß√£o ser√° um ponto importante de avalia√ß√£o.


##2.4.1 - Eu como dono do sal√£o, quero que a aplica√ß√£o seja r√°pida e eficiente, mesmo com muitos agendamentos.
#1- A aplica√ß√£o deve ser capaz de lidar com um grande volume de dados sem comprometer a performance.
#1.1- A performance ser√° avaliada, especialmente na gera√ß√£o do relat√≥rio de servi√ßos conclu√≠dos.
#1.2- Considere otimiza√ß√µes no banco de dados e na l√≥gica de consulta para melhorar a performance. (Pagina√ß√£o)


## 3. Entrega e Avalia√ß√£o
O projeto final deve ser um reposit√≥rio Git com um arquivo `README.md` que explique como instalar e rodar a aplica√ß√£o.
O que ser√° avaliado:
* **Funcionalidade:** O sistema atende a todas as necessidades descritas?
* **Organiza√ß√£o e Clareza:** O c√≥digo √© f√°cil de ler e seguir? A estrutura do projeto √© l√≥gica e bem organizada?
* **Qualidade da Solu√ß√£o:** A solu√ß√£o demonstra uma preocupa√ß√£o com a efici√™ncia e a manuten√ß√£o futura?
* **Conformidade T√©cnica:** As vers√µes de Python e Django especificadas foram utilizadas? O ambiente virtual foi configurado corretamente?
* **Observa√ß√£o sobre Ferramentas de IA:** O uso de intelig√™ncia artificial (IA) √© permitido durante o desafio, mas n√£o √© recomendado. A sua avalia√ß√£o ser√° focada na sua coer√™ncia, conhecimento, qualidade e dom√≠nio t√©cnico sobre o que foi implementado. Valorizamos a sua capacidade de pensar e resolver problemas de forma aut√¥noma.


preciso agrupar os agendamentos por dia/mes teve x agendamentos
fazer uma lista com esses agendamentos                        
                     

Ideias de M√©tricas e Gr√°ficos

üìÖ Agendamentos

Por dia da semana ‚Üí um gr√°fico de barras mostrando em quais dias h√° mais agendamentos.

Por hor√°rio ‚Üí heatmap ou gr√°fico de linha, para ver os hor√°rios mais populares.

Evolu√ß√£o semanal/mensal ‚Üí gr√°fico de linha mostrando a tend√™ncia (subindo ou caindo).

üíá Servi√ßos

Distribui√ß√£o por tipo de servi√ßo ‚Üí gr√°fico de pizza ou barras (ex: cabelo, unhas, maquiagem).

Servi√ßo mais lucrativo ‚Üí considerando valores de cada servi√ßo, mostrar ranking.

üë• Clientes

Novos clientes vs clientes recorrentes (√∫ltima semana/m√™s).

Clientes que mais agendam (ranking dos mais fi√©is).

Cancelamentos por cliente (se houver).

üë©‚Äçüé® Funcion√°rios

N√∫mero de atendimentos por funcion√°rio (ranking de produtividade).

Taxa de ocupa√ß√£o ‚Üí % do tempo que o funcion√°rio ficou com hor√°rios preenchidos.

Avalia√ß√£o m√©dia (se houver notas/coment√°rios).

‚ùå Cancelamentos

Taxa de cancelamento (n√∫mero de cancelados / total de agendamentos).

Cancelamentos por servi√ßo (algum servi√ßo cancela mais?).

Cancelamentos por hor√°rio (talvez hor√°rios menos convenientes).

üí∞ Financeiro (se voc√™ tiver os valores)

Faturamento di√°rio/mensal.

Ticket m√©dio por cliente (valor m√©dio gasto por agendamento).

Comparativo m√™s atual vs m√™s anterior.



üîπ Ideias de Layout

Topo com cards resumidos: [v]

Total de agendamentos hoje [v]

Total da semana [v]

Cancelamentos [V]

Receita estimada [v]

Linha do tempo []

Pizza [v]

Lista de pr√≥ximos agendamentos [v]

Lista de clientes novos []

Lista de cancelamentos recentes []

Ajustar a side e a nav bar

adicionar separa√ß√£o por funcionalidade
    Bot√£o home separado[v]
    Campo de cadastros [v]
    Campo de servi√ßos [v]
    campo de relat√≥rios [v]


      request.sharedstorage



def layout(request):
    geral = Helpers.relatorio_geral(request)
    rank_func = Helpers.rank_funcionarios()
    rank_cli = Helpers.rank_clientes()
    rank_serv = Helpers.rank_servicos()
    limit = 25
    pagina = int(request.GET.get('pagina', 1))
    agendamentos = Agendamento.objects.all()
    servico = Servico.objects.all()
    qntd_agendamentos = agendamentos.count()
    selecionar_status = request.GET.get('selecionar_status')
    

    data_inicio = request.GET.get('data_inicio')
    data_fim = request.GET.get('data_fim')

    if selecionar_status:
        agendamentos = agendamentos.filter(status__iexact=selecionar_status.lower())

    if data_inicio and data_fim:
        agendamentos = agendamentos.filter(data_agendada__range=[data_inicio, data_fim])

    offset = (pagina - 1) * limit
    agendamentos = agendamentos.order_by('data_agendada')[offset:offset + limit]

    contexto = {
        'form': geral['form'],
        'agendamentos': geral['agendamentos'][:25],
        'total_agendamentos': geral['total_agendamentos'],
        'total_arrecadado': geral['total_arrecadado'],
        'rank_func':rank_func,
        'rank_cli':rank_cli,
        'rank_serv':rank_serv,
        'agendamentos': agendamentos,
        'qntd_agendamentos': qntd_agendamentos,
        'pagina': pagina,
        'limit': limit,
        'servico': servico,

    }

    return render(request, "imprimir/layout.html", contexto)




def pydfe(self, request,):
    qs = parse_qs(querstring)
    
    kwargs ={}
    for key, value in qs.items():
        kwargs[key] = value[0]

    self.configuracao_documento = self.get_configuracao_documento()
    context = self.get_context_data(**kwargs)

    header_temporary = self.create_hearder_temporary(context)
    html_str = render_to_string('imprimir/layout.html', context)
    footer_temporary = self.create_footer_temporary(context)

    relatorio_pdf = pydf.generate_pdf(
        html_str,
        page_size=self.configuracao_documento['page_size'],
        margin_top=self.configuracao_documento['margin_top'],
        margin_bottom=self.configuracao_documento['margin_bottom'],
        margin_right=self.configuracao_documento['margin_right'],
        margin_left=self.configuracao_documento['margin_left'],
        header_html=header_temporary.name,
        footer_html=footer_temporary.name,
        image_quality=68,
        image_dpi=300,
    )

    relatorio_pdf=self.set_header_footer(relatorio_pdf)
    return relatorio_pdf